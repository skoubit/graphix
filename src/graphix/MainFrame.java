
package graphix;

import edu.uci.ics.jung.algorithms.layout.StaticLayout;
import edu.uci.ics.jung.graph.ObservableGraph;
import edu.uci.ics.jung.graph.event.GraphEvent;
import edu.uci.ics.jung.graph.event.GraphEventListener;
import edu.uci.ics.jung.io.GraphMLWriter;
import edu.uci.ics.jung.visualization.VisualizationViewer;
import edu.uci.ics.jung.visualization.control.ModalGraphMouse;
import edu.uci.ics.jung.visualization.decorators.ToStringLabeller;
import edu.uci.ics.jung.visualization.renderers.Renderer;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Paint;
import java.awt.Point;
import java.awt.geom.Point2D;
import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.commons.collections15.Factory;
import org.apache.commons.collections15.Transformer;
import popup.MyPopupMenus;
import popup.MyPopupPlugin;
import algorithms.BreadthFirstSearch;
import algorithms.DepthFirstSearch;
import graph.Edge;
import graph.EdgeForm;
import algorithms.HeuristicSearch;
import graph.MazeGraph;
import graph.Node;
import graph.NodeForm;
import graph.Operator;
import algorithms.SearchAlgorithmDialog;
import edu.uci.ics.jung.graph.util.Pair;
import graph.SearchGraph;
import graph.MyEditingModalGraphMouse;

/**
 * ΕΑΠ - ΠΛΗ31 - 4η ΕΡΓΑΣΙΑ 2015-2016
 * @author Tsakiridis Sotiris
 */
public class MainFrame extends javax.swing.JFrame {

    // Ο γράφος αναζήτησης μαζί με το layout και το visualization server
    private SearchGraph searchGraph;
    private StaticLayout<Node, Edge> graphLayout;
    private VisualizationViewer<Node, Edge> graphPanel;
    MyEditingModalGraphMouse graphMouse;
    
    // Observable graph για την καταγραφή συμβάντων
    private ObservableGraph observableGraph;
    
    
    // getters
    public SearchGraph getSearchGraph() { return this.searchGraph; }
    
    /**
     * Creates new form MainFrameTest
     */
    public MainFrame() {
        initComponents();
        
        // start maximazed and set icon
        setExtendedState(java.awt.Frame.MAXIMIZED_BOTH);
        ClassLoader cl = getClass().getClassLoader();
        ImageIcon icon = new ImageIcon(cl.getResource("img/graphix.png"));
        setIconImage(icon.getImage());
        
        
        // Δημιουργούμε ένα νέο κενό γράφο αναζήτησης
        // με έναν default τελεστή δράσης
        // Δημιουργούμε ένα νέο γράφο αναζήτησης και ανοίγουμε τη
        // φόρμα καταχώρησης τελεστών δράσης
        SearchGraph sg = new SearchGraph();
        sg.getOperators().put("GO", new Operator("GO", "Προεπιλεγμένος τελεστής δράσης", 1));
        this.searchGraph = sg;
        this.observableGraph = new ObservableGraph(searchGraph);
        
        
        // Διαμορφώνουμε το panel
        createGraphPanel();
        
        cardPanel.removeAll();
        cardPanel.repaint();
        cardPanel.revalidate();
        cardPanel.add(graphPanel, BorderLayout.CENTER);
        cardPanel.repaint();
        cardPanel.revalidate();
        
        // Κατάσταση =  EDITING (σχεδίαση)
        editStateMenu.setSelected(true);
        editStateButton.setSelected(true);
        graphMouse.setMode(ModalGraphMouse.Mode.EDITING);
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        stateGroupMenu = new javax.swing.ButtonGroup();
        stateGroupButtons = new javax.swing.ButtonGroup();
        viewEdgeLabelGroup = new javax.swing.ButtonGroup();
        viewNodeLabelGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jToolBar2 = new javax.swing.JToolBar();
        newFreeButton = new javax.swing.JButton();
        newMazeButton = new javax.swing.JButton();
        openButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        pickStateButton = new javax.swing.JToggleButton();
        editStateButton = new javax.swing.JToggleButton();
        zoomStateButton = new javax.swing.JToggleButton();
        cardPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newFreeMenu = new javax.swing.JMenuItem();
        newMazeMenu = new javax.swing.JMenuItem();
        openMenu = new javax.swing.JMenuItem();
        saveMenu = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exitMenu = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        viewNodeLabel = new javax.swing.JCheckBoxMenuItem();
        viewNodeHeuritic = new javax.swing.JCheckBoxMenuItem();
        viewNodeLabelAndHeuritic = new javax.swing.JCheckBoxMenuItem();
        viewNodeNone = new javax.swing.JCheckBoxMenuItem();
        jMenu1 = new javax.swing.JMenu();
        viewEdgeOperator = new javax.swing.JCheckBoxMenuItem();
        viewEdgeWeight = new javax.swing.JCheckBoxMenuItem();
        viewEdgeNone = new javax.swing.JCheckBoxMenuItem();
        stateMenu = new javax.swing.JMenu();
        pickStateMenu = new javax.swing.JCheckBoxMenuItem();
        editStateMenu = new javax.swing.JCheckBoxMenuItem();
        zoomStateMenu = new javax.swing.JCheckBoxMenuItem();
        paramMenu = new javax.swing.JMenu();
        operatorsMenus = new javax.swing.JMenuItem();
        algorithmMenu = new javax.swing.JMenu();
        dfsMenu = new javax.swing.JMenuItem();
        bfsMenu = new javax.swing.JMenuItem();
        greedyMenu = new javax.swing.JMenuItem();
        astarMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Graphix");

        jToolBar2.setFloatable(false);
        jToolBar2.setRollover(true);

        newFreeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/new24.png"))); // NOI18N
        newFreeButton.setToolTipText("Νέος κενός χώρος αναζήτησης");
        newFreeButton.setFocusable(false);
        newFreeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        newFreeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        newFreeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newFreeButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(newFreeButton);

        newMazeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/newmaze24.png"))); // NOI18N
        newMazeButton.setToolTipText("Νέος χώρος αναζήτησης από λαβύρινθο");
        newMazeButton.setFocusable(false);
        newMazeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        newMazeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        newMazeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMazeButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(newMazeButton);

        openButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/open.png"))); // NOI18N
        openButton.setToolTipText("Άνοιγμα");
        openButton.setFocusable(false);
        openButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(openButton);

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/save.png"))); // NOI18N
        saveButton.setToolTipText("Αποθήκευση");
        saveButton.setFocusable(false);
        saveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(saveButton);
        jToolBar2.add(jSeparator2);

        stateGroupButtons.add(pickStateButton);
        pickStateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/pick24.png"))); // NOI18N
        pickStateButton.setToolTipText("Επιλογή");
        pickStateButton.setFocusable(false);
        pickStateButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pickStateButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        pickStateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pickStateButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(pickStateButton);

        stateGroupButtons.add(editStateButton);
        editStateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/edit24.png"))); // NOI18N
        editStateButton.setSelected(true);
        editStateButton.setToolTipText("Εισαγωγή κόμβων/ακμών");
        editStateButton.setFocusable(false);
        editStateButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editStateButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editStateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editStateButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(editStateButton);

        stateGroupButtons.add(zoomStateButton);
        zoomStateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/move24.png"))); // NOI18N
        zoomStateButton.setToolTipText("Zoom");
        zoomStateButton.setFocusable(false);
        zoomStateButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        zoomStateButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        zoomStateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomStateButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(zoomStateButton);

        cardPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        cardPanel.setLayout(new java.awt.CardLayout());

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("© ΕΑΠ 2016 -  ΠΛΗ31 - ΤΣΑΚΙΡΙΔΗΣ ΣΩΤΗΡΗΣ (sotiris@serres.gr)");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jToolBar2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        fileMenu.setText("Αρχείο");

        newFreeMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/new24.png"))); // NOI18N
        newFreeMenu.setText("Δημιουργία κενού χώρου αναζήτησης");
        newFreeMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newFreeMenuActionPerformed(evt);
            }
        });
        fileMenu.add(newFreeMenu);

        newMazeMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/newmaze24.png"))); // NOI18N
        newMazeMenu.setText("Δημιουργία από λαβύρινθο");
        newMazeMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMazeMenuActionPerformed(evt);
            }
        });
        fileMenu.add(newMazeMenu);

        openMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/open.png"))); // NOI18N
        openMenu.setText("Άνοιγμα χώρου αναζήτησης");
        openMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuActionPerformed(evt);
            }
        });
        fileMenu.add(openMenu);

        saveMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/save.png"))); // NOI18N
        saveMenu.setText("Αποθήκευση χώρου αναζήτησης");
        saveMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenu);
        fileMenu.add(jSeparator1);

        exitMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/exit.png"))); // NOI18N
        exitMenu.setText("Έξοδος");
        exitMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenu);

        jMenuBar1.add(fileMenu);

        viewMenu.setText("Προβολή");

        jMenu2.setText("Ετικέτες κόμβων");

        viewNodeLabelGroup.add(viewNodeLabel);
        viewNodeLabel.setSelected(true);
        viewNodeLabel.setText("Ονομασία κόμβου");
        viewNodeLabel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewNodeLabelActionPerformed(evt);
            }
        });
        jMenu2.add(viewNodeLabel);

        viewNodeLabelGroup.add(viewNodeHeuritic);
        viewNodeHeuritic.setText("Τιμή ευρετικού");
        viewNodeHeuritic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewNodeHeuriticActionPerformed(evt);
            }
        });
        jMenu2.add(viewNodeHeuritic);

        viewNodeLabelGroup.add(viewNodeLabelAndHeuritic);
        viewNodeLabelAndHeuritic.setText("Όνομα και τιμή ευρετικού");
        viewNodeLabelAndHeuritic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewNodeLabelAndHeuriticActionPerformed(evt);
            }
        });
        jMenu2.add(viewNodeLabelAndHeuritic);

        viewNodeLabelGroup.add(viewNodeNone);
        viewNodeNone.setText("Καμμία");
        viewNodeNone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewNodeNoneActionPerformed(evt);
            }
        });
        jMenu2.add(viewNodeNone);

        viewMenu.add(jMenu2);

        jMenu1.setText("Ετικέτες ακμών");

        viewEdgeLabelGroup.add(viewEdgeOperator);
        viewEdgeOperator.setText("Τελεστής δράσης");
        viewEdgeOperator.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewEdgeOperatorActionPerformed(evt);
            }
        });
        jMenu1.add(viewEdgeOperator);

        viewEdgeLabelGroup.add(viewEdgeWeight);
        viewEdgeWeight.setText("Βάρος ακμής");
        viewEdgeWeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewEdgeWeightActionPerformed(evt);
            }
        });
        jMenu1.add(viewEdgeWeight);

        viewEdgeLabelGroup.add(viewEdgeNone);
        viewEdgeNone.setSelected(true);
        viewEdgeNone.setText("Καμμία");
        viewEdgeNone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewEdgeNoneActionPerformed(evt);
            }
        });
        jMenu1.add(viewEdgeNone);

        viewMenu.add(jMenu1);

        jMenuBar1.add(viewMenu);

        stateMenu.setText("Κατάσταση");

        stateGroupMenu.add(pickStateMenu);
        pickStateMenu.setText("Επιλογή");
        pickStateMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pickStateMenuActionPerformed(evt);
            }
        });
        stateMenu.add(pickStateMenu);

        stateGroupMenu.add(editStateMenu);
        editStateMenu.setSelected(true);
        editStateMenu.setText("Σχεδίαση");
        editStateMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editStateMenuActionPerformed(evt);
            }
        });
        stateMenu.add(editStateMenu);

        stateGroupMenu.add(zoomStateMenu);
        zoomStateMenu.setText("Μετακίνηση/Ζουμ");
        zoomStateMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomStateMenuActionPerformed(evt);
            }
        });
        stateMenu.add(zoomStateMenu);

        jMenuBar1.add(stateMenu);

        paramMenu.setText("Παράμετροι");

        operatorsMenus.setText("Τελεστές δράσης...");
        operatorsMenus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                operatorsMenusActionPerformed(evt);
            }
        });
        paramMenu.add(operatorsMenus);

        jMenuBar1.add(paramMenu);

        algorithmMenu.setText("Αλγόριθμοι");

        dfsMenu.setText("Αναζήτηση κατά βάθος (DFS)");
        dfsMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dfsMenuActionPerformed(evt);
            }
        });
        algorithmMenu.add(dfsMenu);

        bfsMenu.setText("Αναζήτηση κατά πλάτος (BFS)");
        bfsMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bfsMenuActionPerformed(evt);
            }
        });
        algorithmMenu.add(bfsMenu);

        greedyMenu.setText("Άπληστη αναζήτηση");
        greedyMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greedyMenuActionPerformed(evt);
            }
        });
        algorithmMenu.add(greedyMenu);

        astarMenu.setText("Αναζήτηση Α*");
        astarMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                astarMenuActionPerformed(evt);
            }
        });
        algorithmMenu.add(astarMenu);

        jMenuBar1.add(algorithmMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newFreeMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFreeMenuActionPerformed
        
        // Δημιουργούμε ένα νέο γράφο αναζήτησης και ανοίγουμε
        SearchGraph sg = new SearchGraph();
        sg.getOperators().put("GO", new Operator("GO", "Προεπιλεγμένος τελεστής δράσης", 1));
        
        // Εκχωρούμε το γράφο
        this.searchGraph = sg;
        this.observableGraph = new ObservableGraph(searchGraph);
        
        // Διαμορφώνουμε το panel
        createGraphPanel();
        cardPanel.removeAll();
        cardPanel.repaint();
        cardPanel.revalidate();
        cardPanel.add(graphPanel, BorderLayout.CENTER);
        cardPanel.repaint();
        cardPanel.revalidate();
        
        // Κατάσταση =  EDITING (σχεδίαση)
        editStateMenu.setSelected(true);
        editStateButton.setSelected(true);
        graphMouse.setMode(ModalGraphMouse.Mode.EDITING);
        
        
    }//GEN-LAST:event_newFreeMenuActionPerformed

    private void newMazeMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMazeMenuActionPerformed
       
        // Άνοιγμα του maze
        MazePanelDialog maze = new MazePanelDialog(this, true);
        maze.setLocationRelativeTo(this);
        maze.setVisible(true);
        
        // Αν πατήσαμε άκυρο επιτρέφουμε
        if (!maze.isOk()) return;
        
        // Παίρνουμε το grid και δημιουργούμε ένα MazeGraph
        searchGraph = new MazeGraph(maze.getGrid(), maze.hasDiagonals());
        observableGraph = new ObservableGraph(searchGraph);
        
        // Δίνουμε την τιμή της ευρετικής συνάρτησης
        // Αν είναι χωρίς διαγώνιες κινήσεις -> απόσταση Manhattan
        // Αν είναι με διαγώνιες κινήσεις -> Ευκλείδια
        // Ως ευρετικό χρησιμοποιούμε την απόσταση manhattan
        ArrayList<Node> targetNodes = searchGraph.getTargetNodes();
        if (targetNodes.size() != 1) return;

        Node target = searchGraph.getTargetNodes().get(0);

        for (Node n : searchGraph.getVertices()) {
            
            if (maze.hasDiagonals()) {
                n.setH(Util.eucledian(n, target));
                n.setF(n.getH());
            }
            else {
                n.setH(Util.manhattan(n, target));
                n.setF(n.getH());
            }            
            
        }
        
        // Διαμορφώνουμε το panel
        createGraphPanel();
        cardPanel.removeAll();
        cardPanel.repaint();
        cardPanel.revalidate();
        cardPanel.add(graphPanel, BorderLayout.CENTER);
        cardPanel.repaint();
        cardPanel.revalidate();
  
        
    }//GEN-LAST:event_newMazeMenuActionPerformed

    private void saveMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuActionPerformed

        // Ανοίγουμε το παράθυρο επιλογής αρχείου
        // Φιλτράρουμε τα αρχεία .xml
        final JFileChooser fc = new JFileChooser();
        fc.setDialogTitle("Επιλογή αρχείου αποθήκευσης XML");
        FileNameExtensionFilter filter;
        filter = new FileNameExtensionFilter("Αρχεία XML", "xml");
        fc.setFileFilter(filter);
        
        int returnVal = fc.showSaveDialog(null);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            
            File selectedFile = fc.getSelectedFile();
            
            // Αν δεν έχει κατάληξη .xml την προσθέτουμε
            if ( !selectedFile.getAbsolutePath().endsWith(".xml") )
                selectedFile = new File(selectedFile.getAbsolutePath() + ".xml");
            
            // Αν υπάρχει ήδη το αρχείο, μήνυμα ότι θα αντικατασταθεί
            if (selectedFile.exists()) {
                int result = JOptionPane.showConfirmDialog(null, 
                        "Το όνομα αρχείου υπάρχει ήδη.\nΘέλετε να αντικατασταθεί?",
                        "Το αρχείο υπάρχει ήδη", JOptionPane.YES_NO_OPTION);
                if (result != JOptionPane.YES_OPTION) return;
            }
            
            // Save the contents of Xml to selectedFile
            try {
                GraphMLWriter<Node, Edge> ml = new GraphMLWriter();
                FileWriter fw = new FileWriter(selectedFile);
                
                searchGraph.updateNodePositions(graphLayout);

                // Αποθηκεύουμε τα δεδομένα
                searchGraph.saveToGraphML(ml);
                ml.save(searchGraph, fw);
                fw.close();

            }
            catch(Exception e) {
                e.printStackTrace();
                
            }
            
        }
      
        
    }//GEN-LAST:event_saveMenuActionPerformed

    private void openMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuActionPerformed
        
        SearchGraph sg = SearchGraph.load();
        
        if (sg == null) return;
        
        this.searchGraph = sg;
        this.observableGraph = new ObservableGraph(searchGraph);
        
        // Διαμορφώνουμε το panel
        // Ανακτούμε τις αποθηκευμένες θέσεις των nodes
        createGraphPanel();
        for (Node n : searchGraph.getVertices()) 
             graphLayout.setLocation(n, new Point2D.Double(n.getX(), n.getY()));

        
        cardPanel.removeAll();
        cardPanel.repaint();
        cardPanel.revalidate();
        cardPanel.add(graphPanel, BorderLayout.CENTER);
        cardPanel.repaint();
        cardPanel.revalidate();
        
    }//GEN-LAST:event_openMenuActionPerformed

    private void exitMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuActionPerformed
        
        // Μήνυμα επιβεβαίωσης και έξοδος
            int dialogResult = JOptionPane.showConfirmDialog (null, 
                "Θέλετε να κλείσετε την εφαρμογή?","Έξοδος",JOptionPane.YES_NO_OPTION);
            if(dialogResult == JOptionPane.YES_OPTION){
                System.exit( 0 );
            }
        
        
    }//GEN-LAST:event_exitMenuActionPerformed

    private void greedyMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_greedyMenuActionPerformed
        
        // Αν δεν υπάρχει γράφος, μήνυμα και επιστροφή
        if (this.searchGraph == null) {
            JOptionPane.showMessageDialog(null,
                            "Πρέπει να δημιουργήσετε πρώτα έναν χώρο αναζήτησης.",
                            "Σφάλμα", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Δημιουργία και άνοιγμα του modal dialog
        // Ενημερώνουμε τις συντεταγμένες των κόμβων
        searchGraph.resetSolutionPath();
        searchGraph.updateNodePositions(graphLayout);
        HeuristicSearch greedy = new HeuristicSearch(searchGraph, HeuristicSearch.GREEDY);

        String title = "Άπληστος αλγόριθμος αναζήτησης (Greedy)";
        SearchAlgorithmDialog dlg = new SearchAlgorithmDialog(this, true, title, greedy);
        dlg.setLocationRelativeTo(this);
        dlg.setVisible(true);
   
    }//GEN-LAST:event_greedyMenuActionPerformed

    private void dfsMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dfsMenuActionPerformed
        
        // Αν δεν υπάρχει γράφος, μήνυμα και επιστροφή
        if (this.searchGraph == null) {
            JOptionPane.showMessageDialog(null,
                            "Πρέπει να δημιουργήσετε πρώτα έναν χώρο αναζήτησης.",
                            "Σφάλμα", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Καθαρίζουμε την λίστα της επιτυχούς διαδρομής
        // (μπορεί να υπάρχει από προηγούμενη αναζήτηση)
        // και δημιουργούμε ένα στιγμιότυπο του αλγορίθμου
        // Ενημερώνουμε τις συντεταγμένες των κόμβων
        searchGraph.resetSolutionPath();
        searchGraph.updateNodePositions(graphLayout);
        DepthFirstSearch dfs = new DepthFirstSearch(searchGraph);

        // Δημιουργία και άνοιγμα του modal dialog
        String title = "Αλγόριθμος αναζήτησης κατά βάθος (DFS)";
        SearchAlgorithmDialog dlg = new SearchAlgorithmDialog(this, true, title, dfs);
        dlg.setLocationRelativeTo(this);
        dlg.setVisible(true);
        
    }//GEN-LAST:event_dfsMenuActionPerformed

    private void bfsMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bfsMenuActionPerformed
        
        // Αν δεν υπάρχει γράφος, μήνυμα και επιστροφή
        if (this.searchGraph == null) {
            JOptionPane.showMessageDialog(null,
                            "Πρέπει να δημιουργήσετε πρώτα έναν χώρο αναζήτησης.",
                            "Σφάλμα", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Καθαρίζουμε την λίστα της επιτυχούς διαδρομής
        // (μπορεί να υπάρχει από προηγούμενη αναζήτηση)
        // και δημιουργούμε ένα στιγμιότυπο του αλγορίθμου
        // Ενημερώνουμε τις συνταταγμένες των κόμβων
        searchGraph.resetSolutionPath();
        searchGraph.updateNodePositions(graphLayout);
        BreadthFirstSearch bfs = new BreadthFirstSearch(searchGraph);


        // Δημιουργία και άνοιγμα του modal dialog
        String title = "Αλγόριθμος αναζήτησης κατά πλάτος (BFS)";
        SearchAlgorithmDialog dlg = new SearchAlgorithmDialog(this, true, title, bfs);
        dlg.setLocationRelativeTo(this);
        dlg.setVisible(true);
        
    }//GEN-LAST:event_bfsMenuActionPerformed

    private void astarMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_astarMenuActionPerformed
        
        // Αν δεν υπάρχει γράφος, μήνυμα και επιστροφή
        if (this.searchGraph == null) {
            JOptionPane.showMessageDialog(null,
                            "Πρέπει να δημιουργήσετε πρώτα έναν χώρο αναζήτησης.",
                            "Σφάλμα", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Δημιουργία και άνοιγμα του modal dialog
        // Ενημερώνουμε τις συντεταγμένες των κόμβων
        searchGraph.resetSolutionPath();
        searchGraph.updateNodePositions(graphLayout);
        HeuristicSearch astar = new HeuristicSearch(searchGraph, HeuristicSearch.ASTAR);

        String title = "Αλγόριθμος αναζήτησης Α*";
        SearchAlgorithmDialog dlg = new SearchAlgorithmDialog(this, true, title, astar);
        dlg.setLocationRelativeTo(this);
        dlg.setVisible(true);
        
    }//GEN-LAST:event_astarMenuActionPerformed

    private void operatorsMenusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_operatorsMenusActionPerformed
        
        // Αν δεν υπάρχει γράφος, μήνυμα και επιστροφή
        if (this.searchGraph == null) {
            JOptionPane.showMessageDialog(null,
                            "Πρέπει να δημιουργήσετε πρώτα έναν χώρο αναζήτησης.",
                            "Σφάλμα", JOptionPane.ERROR_MESSAGE);
            return;
        }

        
        // Άνοιγμα της φόρμας επεξεργασίας τελεστών δράσης
        // για το συγκεκριμένο γράφο αναζήτησης
        OperatorListForm opForm = new OperatorListForm(this, true, searchGraph);
        opForm.setLocationRelativeTo(this);
        opForm.setVisible(true);
        
        // Αν πατήσαμε "ακύρωση" επιστρέφουμε
        if (!opForm.isOk()) return;
        
        // Ανανεώνουμε την προβολή
        this.graphPanel.repaint();
        this.graphPanel.revalidate();
        
        
        
    }//GEN-LAST:event_operatorsMenusActionPerformed

    private void viewEdgeOperatorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewEdgeOperatorActionPerformed
        
        if (this.graphPanel == null) return;
    
        if (viewEdgeOperator.isSelected()) {
            graphPanel.getRenderContext().setEdgeLabelTransformer(new ToStringLabeller() {
                @Override
                public String transform(Object o) {
                    Edge e = (Edge)o;
                    return e.getOperator().getLabel();
                }
            });
        }
        
        graphPanel.repaint();
        graphPanel.revalidate();
        
    }//GEN-LAST:event_viewEdgeOperatorActionPerformed

    private void newFreeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFreeButtonActionPerformed
        newFreeMenuActionPerformed(evt);
        
    }//GEN-LAST:event_newFreeButtonActionPerformed

    private void newMazeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMazeButtonActionPerformed
        newMazeMenuActionPerformed(evt);
    }//GEN-LAST:event_newMazeButtonActionPerformed

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        openMenuActionPerformed(evt);
    }//GEN-LAST:event_openButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        saveMenuActionPerformed(evt);
    }//GEN-LAST:event_saveButtonActionPerformed

    private void editStateMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editStateMenuActionPerformed
        
        editStateButton.setSelected(editStateMenu.isSelected());
        
        if (editStateMenu.isSelected()) {
            graphMouse.setMode(ModalGraphMouse.Mode.EDITING);
        }
        
        
    }//GEN-LAST:event_editStateMenuActionPerformed

    private void zoomStateMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomStateMenuActionPerformed
        
        zoomStateButton.setSelected(zoomStateMenu.isSelected());
        
         if (zoomStateMenu.isSelected()) {
            graphMouse.setMode(ModalGraphMouse.Mode.TRANSFORMING);
        }
    }//GEN-LAST:event_zoomStateMenuActionPerformed

    private void zoomStateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomStateButtonActionPerformed
        
        zoomStateMenu.setSelected(zoomStateButton.isSelected());
        
        if (zoomStateButton.isSelected()) {
            graphMouse.setMode(ModalGraphMouse.Mode.TRANSFORMING);
        }
    }//GEN-LAST:event_zoomStateButtonActionPerformed

    private void editStateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editStateButtonActionPerformed
        
        editStateMenu.setSelected(editStateButton.isSelected());
        
        if (editStateButton.isSelected()) {
            graphMouse.setMode(ModalGraphMouse.Mode.EDITING);
        }
    }//GEN-LAST:event_editStateButtonActionPerformed

    private void pickStateMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pickStateMenuActionPerformed
        
        pickStateButton.setSelected(pickStateMenu.isSelected());
        
        if (pickStateMenu.isSelected()) {
            graphMouse.setMode(ModalGraphMouse.Mode.PICKING);
        }
    }//GEN-LAST:event_pickStateMenuActionPerformed

    private void pickStateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pickStateButtonActionPerformed
        
        pickStateMenu.setSelected(pickStateButton.isSelected());
        
        if (pickStateButton.isSelected()) {
            graphMouse.setMode(ModalGraphMouse.Mode.PICKING);
        }
    }//GEN-LAST:event_pickStateButtonActionPerformed

    private void viewEdgeNoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewEdgeNoneActionPerformed
        
        if (this.graphPanel == null) return;
    
        if (viewEdgeNone.isSelected()) {
            graphPanel.getRenderContext().setEdgeLabelTransformer(new ToStringLabeller() {
                @Override
                public String transform(Object o) {
                    return "";
                }
            });
        }   
    
        graphPanel.repaint();
        graphPanel.revalidate();
        
    }//GEN-LAST:event_viewEdgeNoneActionPerformed

    private void viewEdgeWeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewEdgeWeightActionPerformed
        
        if (this.graphPanel == null) return;
        
        if (viewEdgeWeight.isSelected()) {
            graphPanel.getRenderContext().setEdgeLabelTransformer(new ToStringLabeller() {
                @Override
                public String transform(Object o) {
                    Edge e = (Edge)o;
                    return Double.toString(e.getWeight());
                }
            });
            
        }
        
        graphPanel.repaint();
        graphPanel.revalidate();
        
    }//GEN-LAST:event_viewEdgeWeightActionPerformed

    private void viewNodeLabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewNodeLabelActionPerformed
        
        if (this.graphPanel == null) return;
    
        if (viewNodeLabel.isSelected()) {
            graphPanel.getRenderContext().setVertexLabelTransformer(new ToStringLabeller() {
                @Override
                public String transform(Object o) {
                    Node n = (Node)o;
                    return n.getLabel();
                }
            });
        }
  
        graphPanel.repaint();
        graphPanel.revalidate();
    }//GEN-LAST:event_viewNodeLabelActionPerformed

    private void viewNodeHeuriticActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewNodeHeuriticActionPerformed
        
        if (this.graphPanel == null) return;
    
        if (viewNodeHeuritic.isSelected()) {
            graphPanel.getRenderContext().setVertexLabelTransformer(new ToStringLabeller() {
                @Override
                public String transform(Object o) {
                    Node n = (Node)o;
                    return Double.toString(n.getH());
                }
            });
        }
  
        graphPanel.repaint();
        graphPanel.revalidate();
        
    }//GEN-LAST:event_viewNodeHeuriticActionPerformed

    private void viewNodeNoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewNodeNoneActionPerformed
        
        if (this.graphPanel == null) return;
    
        if (viewNodeNone.isSelected()) {
            graphPanel.getRenderContext().setVertexLabelTransformer(new ToStringLabeller() {
                @Override
                public String transform(Object o) {
                    return "";
                }
            });
        }
  
        graphPanel.repaint();
        graphPanel.revalidate();
        
    }//GEN-LAST:event_viewNodeNoneActionPerformed

    private void viewNodeLabelAndHeuriticActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewNodeLabelAndHeuriticActionPerformed
        
        if (this.graphPanel == null) return;
    
        if (viewNodeLabelAndHeuritic.isSelected()) {
            graphPanel.getRenderContext().setVertexLabelTransformer(new ToStringLabeller() {
                @Override
                public String transform(Object o) {
                    Node n = (Node)o;
                    return n.getLabel() + "(" + Double.toString(n.getH()) + ")";
                }
            });
        }
  
        graphPanel.repaint();
        graphPanel.revalidate();
        
    }//GEN-LAST:event_viewNodeLabelAndHeuriticActionPerformed

    
    // Δημιουργούμε το graphPanel
    private void createGraphPanel() {
        
        // Αν δεν έχει αρχικοποιηθει το searchGraph επιστρέφουμε
        if (searchGraph == null) return;
        
        graphLayout = new StaticLayout<Node, Edge>(observableGraph);
        graphPanel = new VisualizationViewer(graphLayout);
        graphMouse = new MyEditingModalGraphMouse(graphPanel.getRenderContext(), new VertexFactory(), new EdgeFactory());
       
        graphPanel.setLayout(new BorderLayout());
        
        // Τα νέα popup menus για τους κόμβους και τις ακμές
        MyPopupPlugin myPlugin = new MyPopupPlugin();
        myPlugin.setNodePopup(MyPopupMenus.nodePopup(this));
        myPlugin.setEdgePopup(MyPopupMenus.edgePopup(this));
        graphMouse.remove(graphMouse.getPopupEditingPlugin());
        graphMouse.add(myPlugin);
        
        // set the mouse to panel
        graphPanel.setGraphMouse(graphMouse);
        
        // Θέτουμε τις συντεταγμένες των κόμβων
        for (Node n : searchGraph.getVertices()) {
            graphLayout.setLocation(n, new Point2D.Double(n.getX(), n.getY()));
        }
        
        
        // set node colors
        Transformer<Node, Paint> nodePaint = new Transformer<Node, Paint>() {
        
            @Override
            public Paint transform(Node n) {
                
                // Αν είναι ο κόμβος έναρξη τον βάφουμε κόκκινο
                // Αν είναι κόμβος-στόχος, τον βάφουμε μπλε
                // Οι υπόλοιπο κόμβοι είναι άσπροι
                if (n.isStartNode()) return Color.RED;
                if (n.isTargetNode()) return Color.GREEN;
                  
                // default
                return Color.WHITE;
            }
        };
        
        
        // Ετικέτε κόμβων και ακμών
        graphPanel.getRenderContext().setVertexFillPaintTransformer(nodePaint);
        graphPanel.getRenderContext().setVertexLabelTransformer(new ToStringLabeller());
        graphPanel.getRenderer().getVertexLabelRenderer().setPosition(Renderer.VertexLabel.Position.NW);
        graphPanel.getRenderContext().getEdgeLabelRenderer().setRotateEdgeLabels(true);   // όχι παράλληλες ετικέτες 
        viewNodeLabel.setSelected(true);
        viewEdgeNone.setSelected(true);
        
        
        
        // Συμβάν εισαγωγης νέου κόμβου και ακμής
        observableGraph.addGraphEventListener(new GraphEventListener<Node, Edge>(){
            @Override
            public void handleGraphEvent(GraphEvent<Node, Edge> evt) {
                
                // Νέος κόμβος
                if (evt.getType() == GraphEvent.Type.VERTEX_ADDED) {
                    
                    GraphEvent.Vertex ve = (GraphEvent.Vertex)evt;
                    Node node = (Node)ve.getVertex();
                    
                    if (node.isDeleted()) {
                        MainFrame.this.observableGraph.removeVertex(node);
                    }
                    
                    // Αν ο νέος κόμβος είναι κόμβος έναρξης
                    // ενημερώνουμε την λίστα των κόμβων 
                    // (μήπως υπάρχει ήδη κάποιος άλλος οπότε τον αλλάζουμε)
                    if (node.isStartNode()) {
                        for (Node n : searchGraph.getVertices())
                            if (n != node && n.isStartNode()) n.setStartNode(false);
                    }
                    
                }
                
                // Νέα ακμή
                if (evt.getType() == GraphEvent.Type.EDGE_ADDED) {
                    
                    GraphEvent.Edge ee = (GraphEvent.Edge)evt;
                    Edge edge = (Edge)ee.getEdge();
                    
                    // Αν έχει τεθεί το flag διαγραφής, διέγραψέ την
                    if (edge.isDeleted()) {
                        MainFrame.this.observableGraph.removeEdge(edge);
                        return;
                    }
                    
                    // Αν είναι ανακύκλωση, διέγραψέ την
                    Pair<Node> pair = MainFrame.this.observableGraph.getEndpoints(edge);
                    if (pair.getFirst() == pair.getSecond())
                        MainFrame.this.observableGraph.removeEdge(edge);
   
                }
            }
            
        });


        // Αρχική κατάσταση λειτουργίας
        zoomStateMenu.setSelected(true);
        zoomStateButton.setSelected(true);
        graphMouse.setMode(ModalGraphMouse.Mode.TRANSFORMING);
        
      
    } 
    
    
    class VertexFactory implements Factory<Node> {

            @Override
		public Node create() {
                    Node n = new Node("");
                    NodeForm nf = new NodeForm(null, true, n);
                    Point p = graphPanel.getMousePosition();
                    n.setX(p.getX());
                    n.setY(p.getY());
                    nf = new NodeForm(MainFrame.this, true, n);
                    nf.setLocation(p);
                    nf.setVisible(true);
                    
                    // Αν πατήσαμε "Άκυρο" θέτουμε το flag διαγραφής
                    // έτσι ώστε να διαγραφεί κατά το συμβάναν newVerterx
                    if (!nf.isOk()) n.setDeleted(true);
                    
                    return n;
		}
    }
    
    class EdgeFactory implements Factory<Edge> {

    	int i=0;
    	
            @Override
		public Edge create() {
                    Edge e = new Edge();
                    
                    Point p = graphPanel.getMousePosition();
                    EdgeForm ef = new EdgeForm(MainFrame.this, true, e, searchGraph.getOperators());
                    ef.setLocation(p);
                    ef.setVisible(true);
                    
                    // Αν πατήσαμε "Άκυρο" θέτουμε το flag διαγραφής
                    // έτσι ώστε να διαγραφεί κατά το συμβάναν newVerterx
                    if (!ef.isOk()) e.setDeleted(true);
                    
                    
                    return e;
                    
		}
    }
        
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu algorithmMenu;
    private javax.swing.JMenuItem astarMenu;
    private javax.swing.JMenuItem bfsMenu;
    private javax.swing.JPanel cardPanel;
    private javax.swing.JMenuItem dfsMenu;
    private javax.swing.JToggleButton editStateButton;
    private javax.swing.JCheckBoxMenuItem editStateMenu;
    private javax.swing.JMenuItem exitMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem greedyMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JButton newFreeButton;
    private javax.swing.JMenuItem newFreeMenu;
    private javax.swing.JButton newMazeButton;
    private javax.swing.JMenuItem newMazeMenu;
    private javax.swing.JButton openButton;
    private javax.swing.JMenuItem openMenu;
    private javax.swing.JMenuItem operatorsMenus;
    private javax.swing.JMenu paramMenu;
    private javax.swing.JToggleButton pickStateButton;
    private javax.swing.JCheckBoxMenuItem pickStateMenu;
    private javax.swing.JButton saveButton;
    private javax.swing.JMenuItem saveMenu;
    private javax.swing.ButtonGroup stateGroupButtons;
    private javax.swing.ButtonGroup stateGroupMenu;
    private javax.swing.JMenu stateMenu;
    private javax.swing.ButtonGroup viewEdgeLabelGroup;
    private javax.swing.JCheckBoxMenuItem viewEdgeNone;
    private javax.swing.JCheckBoxMenuItem viewEdgeOperator;
    private javax.swing.JCheckBoxMenuItem viewEdgeWeight;
    private javax.swing.JMenu viewMenu;
    private javax.swing.JCheckBoxMenuItem viewNodeHeuritic;
    private javax.swing.JCheckBoxMenuItem viewNodeLabel;
    private javax.swing.JCheckBoxMenuItem viewNodeLabelAndHeuritic;
    private javax.swing.ButtonGroup viewNodeLabelGroup;
    private javax.swing.JCheckBoxMenuItem viewNodeNone;
    private javax.swing.JToggleButton zoomStateButton;
    private javax.swing.JCheckBoxMenuItem zoomStateMenu;
    // End of variables declaration//GEN-END:variables
}
