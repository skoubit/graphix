
package graphix;


import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import graph.Edge;
import graph.Operator;
import graph.OperatorForm;
import graph.SearchGraph;

/**
 * ΕΑΠ - ΠΛΗ31 - 4η ΕΡΓΑΣΙΑ 2015-2016
 * @author Tsakiridis Sotiris
 */
public class OperatorListForm extends javax.swing.JDialog {

    // Περίδα φόρματς
    private SearchGraph searchGraph;
    private boolean ok = false;
    
    // getters
    public boolean isOk() { return this.ok; }
    
    
    /**
     * Creates new form OperatorListForm
     * @param parent
     * @param modal
     * @param searchGraph
     */
    public OperatorListForm(java.awt.Frame parent, boolean modal, SearchGraph searchGraph) {
        super(parent, modal);
        initComponents();
        
        this.searchGraph = searchGraph;
        
        // Καταχωροούμε τα δεδομένα στον πίνακα τελεστών
        // Δημιουργούμε αρχικά μια ταξινομημένη λίστα ως προς την προτεραιότητα
        HashMap<String, Operator> operators = searchGraph.getOperators();
        ArrayList<Operator> sortedList = new ArrayList();
        DefaultTableModel model = (DefaultTableModel)operatorTable.getModel();
        for (Operator op : operators.values()) {
            sortedList.add(op);
        }
        
        // sort
        Collections.sort(sortedList, new Comparator<Operator>(){
            @Override
            public int compare(Operator o1, Operator o2) {
                if (o1.getPriority() > o2.getPriority()) return 1;
                if (o1.getPriority() < o2.getPriority()) return -1;
                return 0;
            }
        });
        
        // Προσθήκη στον πίνακα
        for (Operator op : sortedList)
            model.addRow(new Object[]{op, op.getLabel(), op.getDescription(),op.getPriority()});
        

        // Αν υπάρχουν δεδομένα επιλογή της 1ης γραμμής
         if ( operatorTable.getRowCount() != 0 )
            operatorTable.changeSelection(0, 0, false, false);
        
        // Κατάσταση κουμπιών
        setButtonState();

        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        operatorTable = new javax.swing.JTable();
        cancelButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Τελεστές δράσης");

        operatorTable.setAutoCreateRowSorter(true);
        operatorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "operator", "Ετικέτα", "Περιγραφή", "Προτεραιότητα"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        operatorTable.setFillsViewportHeight(true);
        operatorTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(operatorTable);
        if (operatorTable.getColumnModel().getColumnCount() > 0) {
            operatorTable.getColumnModel().getColumn(0).setMinWidth(0);
            operatorTable.getColumnModel().getColumn(0).setPreferredWidth(0);
            operatorTable.getColumnModel().getColumn(0).setMaxWidth(0);
            operatorTable.getColumnModel().getColumn(1).setMinWidth(100);
            operatorTable.getColumnModel().getColumn(1).setPreferredWidth(100);
            operatorTable.getColumnModel().getColumn(1).setMaxWidth(100);
            operatorTable.getColumnModel().getColumn(3).setMinWidth(100);
            operatorTable.getColumnModel().getColumn(3).setPreferredWidth(100);
            operatorTable.getColumnModel().getColumn(3).setMaxWidth(100);
        }

        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/cancel16.png"))); // NOI18N
        cancelButton.setText("Ακύρωση");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/add16.png"))); // NOI18N
        addButton.setText("Προσθήκη");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        editButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/edit16.png"))); // NOI18N
        editButton.setText("Επεξεργασία");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/delete16.png"))); // NOI18N
        deleteButton.setText("Διαγραφή");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        okButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ok16.png"))); // NOI18N
        okButton.setText("Καταχώρηση");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 432, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(editButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deleteButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(okButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cancelButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(editButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        
        this.dispose();
        
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        
        // Δημιουργούμε ένα νέο HashMap<Operator>
        // σύμφωνα με τα δεδομένα του πίνακα
        HashMap<String, Operator> newMap = new HashMap();
        int rows = operatorTable.getRowCount();
        DefaultTableModel model = (DefaultTableModel)operatorTable.getModel();
        
        for (int i=0; i<rows; i++) {
            
            // Παίρνουμε τα δεδομένα της γραμμής από τον πίνακα
            Operator op = (Operator)model.getValueAt(i,0);
            String label = op.getLabel();
            String description = op.getDescription();
            int priority = op.getPriority();
            
            // Τον προσθέτουμε στο νέο map
            newMap.put(label, op);
                
        }
        
        // Εκχωρούμε το νέο map τελεστών στο searchGraph
        // και διαγράφουμε τις ακμές με τελεστές που έχουν διαγραφεί
        // Παίρνουμε πρώτα τις ακμές σε μια προσωρινή λίστα
        ArrayList<Edge> edges = new ArrayList();
        for (Edge e : searchGraph.getEdges())
            edges.add(e);
        
        for (Edge e : edges) {
            
            if ( !newMap.containsValue(e.getOperator()) )
                searchGraph.removeEdge(e);
            
        }
       
        searchGraph.setOperators(newMap);
        
        // set ok flag and return
        ok = true;
        this.dispose();
        
        
    }//GEN-LAST:event_okButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        
        // Παίρνουμε την επιλεγμένη γραμμή και τη διαγράφουμε
        DefaultTableModel model = (DefaultTableModel)operatorTable.getModel();
        int row = operatorTable.getSelectedRow();
        model.removeRow(row);
        
        // Επιλέγουμε την προηγούμενη γραμμή, αν υπάρχει
         if (row > 0)
            operatorTable.changeSelection(row-1, 1, false, false);
        else if ( model.getRowCount() !=0 )
            operatorTable.changeSelection(0, 1, false, false);
        
        // κατάσταση κουμπιών
        setButtonState();
        
        
    }//GEN-LAST:event_deleteButtonActionPerformed
    
    // Προσθήκη ενός νέου τελεστή δράσης
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        
        Operator newOp = new Operator("", "", 0);
        JFrame topFrame = (JFrame)SwingUtilities.getWindowAncestor(this);
        OperatorForm opForm = new OperatorForm(topFrame, true, newOp);
        opForm.setLocationRelativeTo(this);
        opForm.setVisible(true);
        
        // Αν δεν επιστρέψαμε με OK επιστροφή
        if ( !opForm.isOk() ) return;
        
        // Έλεγχος αν υπάρχει τελεστής με την ίδια ετικέτα
        // Αν υπάρχει, εμφάνιση μηνύματος - Δεν προστίθεται

        // Προσθέτουμε τον νέο τελεστή στη λίστα των τελεστών
        DefaultTableModel model = (DefaultTableModel)operatorTable.getModel();
        model.addRow(new Object[]{newOp, newOp.getLabel(), newOp.getDescription(),newOp.getPriority()});
        
        // Επιλέγουμε την νέα γραμμή
        int row = model.getRowCount() - 1;
        operatorTable.setRowSelectionInterval(row, row);
        operatorTable.scrollRectToVisible(operatorTable.getCellRect(row, 0, true));
        
        setButtonState();
        
        
        
    }//GEN-LAST:event_addButtonActionPerformed

    // Επεξεργασία επιλεγμένου τελεστή δράσης
    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        
        // Παίρνουμε τον επιλεγμένο τελεστή. 
        // Αν δεν υπάρχει επιστρέφουμε
        DefaultTableModel model = (DefaultTableModel)operatorTable.getModel();
        int row = operatorTable.getSelectedRow();
        
        // Παίρνουμε τον επιλεγμένο τελεστή
        Operator op = (Operator)model.getValueAt(row, 0);
        
        // Ανοίγουμε τη φόρμα επεξεργασίας
        JFrame topFrame = (JFrame)SwingUtilities.getWindowAncestor(this);
        OperatorForm opForm = new OperatorForm(topFrame, true, op);
        opForm.setLocationRelativeTo(this);
        opForm.setVisible(true);
        
        // Αν δεν επιστρέψαμε με OK επιστροφή
        if ( !opForm.isOk() ) return;
        
        // Έλεγχος αν υπάρχει τελεστής με την ίδια ετικέτα
        // Αν υπάρχει, εμφάνιση μηνύματος - Δεν προστίθεται

        // Ενημερώνουμε τον πίνακα με τα νέα στοιχεία
        model.setValueAt(op.getLabel(), row, 1);
        model.setValueAt(op.getDescription(), row, 2);
        model.setValueAt(op.getPriority(), row, 3);
        
        
    }//GEN-LAST:event_editButtonActionPerformed

    
    // Κατάσταση κουμπιών
    private void setButtonState() {
        
        // Παίρνουμε το πλήθος τελεστών δράσης
        int rows = operatorTable.getRowCount();
        if (rows == 0) {
            deleteButton.setEnabled(false);
            editButton.setEnabled(false);
        }
        else
        {
            deleteButton.setEnabled(true);
            editButton.setEnabled(true);
        }
        
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton okButton;
    private javax.swing.JTable operatorTable;
    // End of variables declaration//GEN-END:variables
}
